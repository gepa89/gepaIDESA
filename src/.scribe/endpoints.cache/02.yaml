## Autogenerated by Scribe. DO NOT MODIFY.

name: Books
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/books
    metadata:
      groupName: Books
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a paginated, filtered, and sorted list of books.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Authorization: 'string required The authorization token. Example: Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept-Version: 'string required The version of the API to use. Example: v1'
    urlParameters:
      per_page:
        name: per_page
        description: 'Optional. Number of books per page. Defaults to 10.'
        required: false
        example: 20
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      title:
        name: title
        description: 'Optional. Filter by book title.'
        required: false
        example: 'Harry Potter'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      isbn:
        name: isbn
        description: 'Optional. Filter by book ISBN.'
        required: false
        example: 123-4567890123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order_by:
        name: order_by
        description: 'Optional. Field to sort by. Defaults to "id".'
        required: false
        example: title
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order_dir:
        name: order_dir
        description: 'Optional. Sorting direction (asc or desc). Defaults to "asc".'
        required: false
        example: desc
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      per_page: 20
      title: 'Harry Potter'
      isbn: 123-4567890123
      order_by: title
      order_dir: desc
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
                {
                    "id": 1,
                    "title": "Book Title",
                    "isbn": "123-4567890123",
                    "published_date": "2022-01-01",
                    "author": {
                        "id": 1,
                        "name": "Author Name"
                    }
                }
            ],
            "links": {
                "first": "http://example.com/api/v1/books?page=1",
                "last": "http://example.com/api/v1/books?page=10",
                "prev": null,
                "next": "http://example.com/api/v1/books?page=2"
            },
            "meta": {
                "current_page": 1,
                "last_page": 10,
                "per_page": 10,
                "total": 100
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Invalid pagination or sorting parameters."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "message": "An error occurred while fetching books."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/books
    metadata:
      groupName: Books
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new book.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Authorization: 'string required The authorization token. Example: Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept-Version: 'string required The version of the API to use. Example: v1'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the book.'
        required: true
        example: 'My Book'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      isbn:
        name: isbn
        description: 'The ISBN of the book.'
        required: true
        example: 123-4567890123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      published_date:
        name: published_date
        description: 'The publication date of the book.'
        required: true
        example: '2022-01-01'
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      title: 'My Book'
      isbn: 123-4567890123
      published_date: '2022-01-01'
      author_id: 1
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "id": 1,
            "title": "My Book",
            "isbn": "123-4567890123",
            "published_date": "2022-01-01",
            "author_id": 1
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Validation failed.",
            "errors": {
                "title": ["The title field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "message": "An error occurred while creating the book."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/books/{id}'
    metadata:
      groupName: Books
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get details of a specific book.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Authorization: 'string required The authorization token. Example: Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept-Version: 'string required The version of the API to use. Example: v1'
    urlParameters:
      id:
        name: id
        description: 'Book ID.'
        required: true
        example: 18
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 18
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "title": "Book Title",
            "isbn": "123-4567890123",
            "published_date": "2022-01-01",
            "author": {
                "id": 1,
                "name": "Author Name"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Invalid ID. The ID must be a numeric value."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Book not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "message": "An error occurred while fetching the book."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/books/{id}'
    metadata:
      groupName: Books
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an existing book.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Authorization: 'string required The authorization token. Example: Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept-Version: 'string required The version of the API to use. Example: v1'
    urlParameters:
      id:
        name: id
        description: 'Book ID.'
        required: true
        example: 18
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 18
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'Optional The title of the book.'
        required: false
        example: 'Updated Book Title'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      isbn:
        name: isbn
        description: 'Optional The ISBN of the book.'
        required: false
        example: 123-4567890123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      published_date:
        name: published_date
        description: 'Optional The publication date of the book.'
        required: false
        example: '2022-01-01'
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      author_id:
        name: author_id
        description: 'Optional The ID of the author.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      title: 'Updated Book Title'
      isbn: 123-4567890123
      published_date: '2022-01-01'
      author_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "title": "Updated Book Title",
            "isbn": "123-4567890123",
            "published_date": "2022-01-01",
            "author_id": 1
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Book not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Validation failed.",
            "errors": {
                "title": ["The title field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "message": "An error occurred while updating the book."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/books/{id}'
    metadata:
      groupName: Books
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a book.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Authorization: 'string required The authorization token. Example: Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
    urlParameters:
      id:
        name: id
        description: 'Book ID.'
        required: true
        example: 9
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 9
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Book deleted successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Invalid ID. The ID must be numeric."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Book not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "message": "An error occurred while deleting the book."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
